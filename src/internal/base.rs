use crate::data::Str;
use crate::parser::{Element, ElementKind, Symbol, Symbolic};
use crate::scanner::{Token, TokenKind};
use crate::schema::{Binding, Block, Enumeration, Method, Structure};
use crate::tracker::{Location, Position, Span};

pub fn primitives<'symbol>() -> Vec<Symbol<'symbol>> {
    let token = Symbol::new(
        Symbolic::Enumeration(
            Enumeration::new(
                Box::new(
                    Element::new(
                        ElementKind::Literal(
                            Token::new(
                                TokenKind::Identifier(Str::from("Token")),
                                Span::void(),
                            ),
                        ),
                        Span::void()
                    ),
                ),
                vec![]
            )
        ),
        Span::void()
    );

    let integer = Symbol::new(
        Symbolic::Structure(
            Structure::new(
                Box::new(
                    Element::new(
                        ElementKind::Literal(
                            Token::new(
                                TokenKind::Identifier(Str::from("Integer")),
                                Span::void(),
                            ),
                        ),
                        Span::void()
                    ),
                ),
                vec![
                    Symbol::new(
                        Symbolic::Binding(
                            Binding::new(
                                Box::new(
                                    Element::new(
                                        ElementKind::Literal(
                                            Token::new(
                                                TokenKind::Identifier(Str::from("value")),
                                                Span::void(),
                                            ),
                                        ),
                                        Span::void()
                                    ),
                                ),
                                None,
                                Some(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("Token")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                ),
                                false,
                            )
                        ),
                        Span::void()
                    ),
                    Symbol::new(
                        Symbolic::Binding(
                            Binding::new(
                                Box::new(
                                    Element::new(
                                        ElementKind::Literal(
                                            Token::new(
                                                TokenKind::Identifier(Str::from("size")),
                                                Span::void(),
                                            ),
                                        ),
                                        Span::void()
                                    ),
                                ),
                                None,
                                Some(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("Token")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                ),
                                false,
                            )
                        ),
                        Span::void()
                    )
                ]
            )
        ),
        Span::void()
    );

    let float = Symbol::new(
        Symbolic::Structure(
            Structure::new(
                Box::new(
                    Element::new(
                        ElementKind::Literal(
                            Token::new(
                                TokenKind::Identifier(Str::from("Float")),
                                Span::void(),
                            ),
                        ),
                        Span::void()
                    ),
                ),
                vec![
                    Symbol::new(
                        Symbolic::Binding(
                            Binding::new(
                                Box::new(
                                    Element::new(
                                        ElementKind::Literal(
                                            Token::new(
                                                TokenKind::Identifier(Str::from("value")),
                                                Span::void(),
                                            ),
                                        ),
                                        Span::void()
                                    ),
                                ),
                                None,
                                Some(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("Token")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                ),
                                false,
                            )
                        ),
                        Span::void()
                    ),
                    Symbol::new(
                        Symbolic::Binding(
                            Binding::new(
                                Box::new(
                                    Element::new(
                                        ElementKind::Literal(
                                            Token::new(
                                                TokenKind::Identifier(Str::from("size")),
                                                Span::void(),
                                            ),
                                        ),
                                        Span::void()
                                    ),
                                ),
                                None,
                                Some(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("Token")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                ),
                                false,
                            )
                        ),
                        Span::void()
                    )
                ]
            )
        ),
        Span::void()
    );

    let boolean = Symbol::new(
        Symbolic::Structure(
            Structure::new(
                Box::new(
                    Element::new(
                        ElementKind::Literal(
                            Token::new(
                                TokenKind::Identifier(Str::from("Boolean")),
                                Span::void(),
                            ),
                        ),
                        Span::void()
                    ),
                ),
                vec![
                    Symbol::new(
                        Symbolic::Binding(
                            Binding::new(
                                Box::new(
                                    Element::new(
                                        ElementKind::Literal(
                                            Token::new(
                                                TokenKind::Identifier(Str::from("value")),
                                                Span::void(),
                                            ),
                                        ),
                                        Span::void()
                                    ),
                                ),
                                None,
                                Some(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("Token")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                ),
                                false,
                            )
                        ),
                        Span::void()
                    ),
                ]
            )
        ),
        Span::void()
    );

    let mut primitives = [
        token,
        integer,
        float,
        boolean,
    ].to_vec();

    primitives.extend(io_primitives());

    primitives
}

pub fn io_primitives<'symbol>() -> Vec<Symbol<'symbol>> {
    vec![
        Symbol::new(
            Symbolic::Method(
                Method::new(
                    Box::new(
                        Element::new(
                            ElementKind::Literal(
                                Token::new(
                                    TokenKind::Identifier(Str::from("print")),
                                    Span::void(),
                                ),
                            ),
                            Span::void()
                        ),
                    ),
                    vec![
                        Symbol::new(
                            Symbolic::Binding(
                                Binding::new(
                                    Box::new(
                                        Element::new(
                                            ElementKind::Literal(
                                                Token::new(
                                                    TokenKind::Identifier(Str::from("value")),
                                                    Span::void(),
                                                ),
                                            ),
                                            Span::void()
                                        ),
                                    ),
                                    None,
                                    Some(
                                        Box::new(
                                            Element::new(
                                                ElementKind::Literal(
                                                    Token::new(
                                                        TokenKind::Identifier(Str::from("Integer")),
                                                        Span::void(),
                                                    ),
                                                ),
                                                Span::void()
                                            ),
                                        ),
                                    ),
                                    false,
                                )
                            ),
                            Span::void()
                        )
                    ],
                    Box::new(
                        Element::new(
                            ElementKind::Block(Block::new(vec![])),
                            Span::void()
                        )
                    ),
                    None
                )
            ),
            Span::void()
        ),
    ]
}