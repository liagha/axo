salam = 42;
y = 3.14;
z = true;
w = 1000_000_000;

a = x + y * 2;
b = (x - y) / 2;
c = x % 5;

d = x > y;
e = x <= y;

f = z && (x == 42);
g = !z || (y != 3.14);

if x > 10 {
    x = x - 10;
} else {
    x = x + 10;
}

while (x < 10) {
    x = 10;
}

ch = 'a';
str = "Hello, world!";

range = 1..10;

fn fibonacci(n) {
    if n <= 1 {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

print(result);

let numbers = [1, 2, 3, 4, 5];
let sum = 0;

for i + 1 {
    sum += numbers[i];
}

|x, y| x + y + 3;
test[2] = 43;
x *= 4;

if x > 10 {
    x = x - 10;
} else {
    x = x + 10;
}

for i > 5 {
    sum += numbers[i];
}

while x > 2 {
    test = 4;
}

struct Test {
    name: String,
    age: i32
}

let n = p.name;

let test = (2, 3);

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
    Priority = 10
}

fn add(a, b) a + b;

(a, b, c) = (1,2,3);

if x > 2 && x >= 4 x = 3; else if x > 4 x + 77; else x + 5;

while x > 4 x + 3;

x = if x > 0 {
    5;
} else {
    6;
}

x = y = 5;
let x : i32 = 3;

3 + 3 * 6;

3;

while 5 > x > 2 x = 5;

{
    test = 3;
    x %= 4;

    {
        {
            test = 4;
        }

        fuck *= 5;
        print("shit");
    }

    a = 's';
}

5 + 5 * 5;

for (i in 5) {
    sum += numbers[i];
}

let test = Test { x = 3, y = 5 };
let test = Test { x = 3, y = 5 };
